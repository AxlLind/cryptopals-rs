use std::sync::Mutex;
use std::time::Duration;
use itertools::Itertools;
use actix_web::http::StatusCode;
use actix_web::{get, web, App, HttpServer, Responder, HttpResponse};
use actix_web::rt::time::sleep;
use once_cell::sync::Lazy;
use serde::Deserialize;

#[derive(Deserialize)]
struct Payload {
  #[allow(dead_code)]
  file: String,
  signature: String,
}

// randomly generated bytes
const TARGET_MAC: [u8; 20] = [0x92,0x9f,0xb4,0x44,0x14,0x65,0x84,0xb4,0x80,0xc5,0xe7,0x33,0x38,0x58,0xdd,0xd1,0x6d,0x16,0x97,0x1e];
static SLEEP_DURATION: Lazy<Mutex<u64>> = Lazy::new(|| Mutex::new(0));

fn from_hex_char(c: char) -> Option<u8> {
  match c {
    '0'..='9' => Some((c as u8) - b'0'),
    'a'..='f' => Some((c as u8) - b'a' + 10),
    'A'..='F' => Some((c as u8) - b'A' + 10),
    _ => None
  }
}

fn from_hex_str(hex: &str) -> Option<Vec<u8>> {
  hex.chars()
    .tuples()
    .map(|(c1,c2)| {
      let d1 = from_hex_char(c1)?;
      let d2 = from_hex_char(c2)?;
      Some(d1 * 16 + d2)
    })
    .collect()
}

async fn insecure_compare(a: &[u8], b: &[u8]) -> bool {
  if a.len() != b.len() {
    return false;
  }
  let duration = *SLEEP_DURATION.lock().unwrap();
  for (x,y) in a.iter().zip(b) {
    if x != y {
      return false;
    }
    sleep(Duration::from_millis(duration)).await;
  }
  true
}

#[get("/test")]
async fn index(payload: web::Query<Payload>) -> impl Responder {
  let Payload { signature, .. } = payload.into_inner();
  let valid_signature = insecure_compare(&TARGET_MAC, &from_hex_str(&signature).unwrap()).await;
  HttpResponse::new(if valid_signature {StatusCode::OK} else {StatusCode::INTERNAL_SERVER_ERROR})
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
  let duration_ms = std::env::args()
    .skip(1)
    .next()
    .expect("Need 1 argument")
    .parse::<u64>()
    .expect("Invalid argument");
  println!("Server starting, ms={}", duration_ms);
  *SLEEP_DURATION.lock().unwrap() = duration_ms;

  HttpServer::new(|| App::new().service(index))
    .bind("127.0.0.1:9000")?
    .run()
    .await
}
