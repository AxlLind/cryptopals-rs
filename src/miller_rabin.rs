use num::Integer;
use num::traits::One;
use num_bigint::{BigUint, RandBigInt, ToBigUint};
use once_cell::sync::Lazy;

const FIRST_170_PRIMES: [usize; 170] = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013];
static SMALL_PRIMES: Lazy<Vec<BigUint>> = Lazy::new(|| FIRST_170_PRIMES.iter().map(|p| p.to_biguint().unwrap()).collect());

pub fn miller_rabin(n: &BigUint) -> bool {
  let two = 2.to_biguint().unwrap();
  if n < &two || SMALL_PRIMES.iter().any(|p| n.divides(&p)) {
    return false;
  }
  let one = BigUint::one();
  let mut t = 0;
  let n_minus_one = n - &one;
  let mut s = n_minus_one.clone();
  while !s.is_even() {
    s >>= 1;
    t += 1;
  }
  let mut rng = rand::thread_rng();
  for _ in 0..10 {
    let a = rng.gen_biguint_below(&n_minus_one);
    let mut v = a.modpow(&s, n);
    if v.is_one() {
      continue;
    }
    let not_prime = (0..t).all(|_| {
      v = v.modpow(&two, n);
      v != n_minus_one
    });
    if not_prime {
      return false;
    }
  }
  true
}

pub fn rand_prime(bits: u64) -> BigUint {
  let mut rng = rand::thread_rng();
  let one = BigUint::one();
  loop {
    let mut candidate = rng.gen_biguint(bits) | &one;
    while candidate.bits() < bits {
      candidate <<= 1;
      candidate |= &one;
    }
    if miller_rabin(&candidate) {
      return candidate
    }
  }
}

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn test_small_prime_examples() {
    let random_primes_above_10million = [97098959, 18605941, 41320589, 92960591, 38980577, 58097219, 15143657, 64619447, 12668287, 99400711];
    for p in &random_primes_above_10million {
      assert!(miller_rabin(&p.to_biguint().unwrap()));
    }
  }

  #[test]
  fn test_2048_bit_primes() {
    let ten_large_primes = [
      "24757345661688625617049011657147391421505633911938305847970741924681537354797128820995112174915812941754268910320753261377259892332370316659563278810444877451525740133681925837887704215736691293189413906088856717197778657682068106142552488043214821110656762997340638139470972875737958125058772699935075151439785141771472717358335359797007980103379076813582662662715470101232148969593682318689777085777989826401882958936882584880608996802720955145416170203422889591087092427962735791426780647329460860482620381213746102554092694158882673659338188991398974732891644593373231019987418747152767301858292730039086509186347",
      "30193832686121547376706888374149226894050524562291987729387633692781897118462335499358499040194603570266089307292284029163921347311053337965743165358215094139305827931561723705244457269069523689839429846452116726534795716220813271842919574164877145819049052638372358775230577934655855051194412676880873347463629966516609990393281014210180075788509324296590925792982914959676662562529270102596263637162870076207222020324452457797087016705642426682550954535769463672896332164450809358831750118830702554475079672795761034097159225010865564217919964343488347243245666689746285174174825605423442059925867752966228607856529",
      "29962362701191731112384286339559612686764838424832322474336064261004834421458421216778464534461085846570898881316593377662016566002696122509004672032586173958928314838481234228187825999758690741490902204532069550772754542272518134331271175628747804047452236629670178164218825875842155879738354344507970548143708614537906066662358156345044846482402418246340841606049577183942026005694252370665408035110551694903220812071655183603243323208652298749680130323893361987798514403078434758116322128969801272164815485565919840171581160244313780882084989258871726676842623647603464231497857910199494109336489995519580014377833",
      "31599936244742272223363309053006996160839933049031856230687813084053150433958343208062065971783649555284323480283812582784282031637450020405533541817992379535033421269762995970483186052973456805602172538286745709814289037955796980998960142050010928042126891857704245987311919967807307193162327620911251864826951064548580864331952635368613772140767298974850310931106599682140617372207765500575260921851912670525742666434285326075334863922188731191067570632736212515629093405531966618096586550334486285936670420527776576560393059767373201003979435913079047671127178228325983830404391482059324364854244026882993547289097",
      "27297902369414653406475584146831353861613520626506476684627769000290614932920577516288351322031863122680621484412796191574578604946743131258332317833183383023573636578249631952838574004279550266960039008250334247609944362298600370804482464456820119232133271835405519691095283572727281113016183313764630077438447495905315524162085096231267102550063379316328937453416309182765442153166991312603325284939792332303069337567682952118638450724004737785722848984393662975397823646169421937809390420356431487993369666049036911437806924806850035087129552883182465066253364060537954699759483500271714152115762040836472342735657",
      "24541646007705615508774804090801960834924104402649933613523110338633804172664389207931254567410596136728333268643434378519586530845018348830327810758554415186725059028774152010563173053190401362974307972266918961866890533431876543941535298810335638952928960354483802652094830825497351508112608927528801254405837137933409556190465699702339512008408547257614753412261022742203721927884146295912404421301357888838482569503119488824211173032131357119035744608426378818141789387631121775274564093910088499767201214856105459016776886994447503597688592789087221269409962910959388639402105680248255370406723578426752791069763",
      "30754284636249236691994032410402970800656821948015241823092714863274181365038827347058748776563619424177934496500619835339017199224830153706801268598939762697106115824271345122995792962190339235121292963112572735952513919866918226628989740518338675652161613659912692545535560088646642591715055316744841053987534541893615209888943283094758550600579510499115207871296320736549200673071151907988523762561705223737245469642358062674157556081286484364652158571521106394833215882947836625721102995450895691208579059628665647072619575381836390472432450129191130418821673086262657036441690062407013033254384391915423482661659",
      "30384165453565366582618330929765604607860677506111358779649293641746819578354986032894358837696784288305283519637051169360509739210545468942392988730490799044875604115704807122194067064766143702296199200763055658456122395187652045198005834150900045291758795349483375931577489507813024545612590177201433363295730067033911005174609688143587291196513777809309524746501670884580477051215438206582699642176870997843766834131627923105428759836144831432703785246501780452691315228713029983454738981562057384900432215250311852128409999144677862374834187061292369192275459198268333035125202269075873647161614660713549281924473",
      "29709971712062089059038104581674988383216405978433621218157246118935273635754734569504559888463514136588128957574049678095760572693529431183738757063370044090262884897258207942517120847967954524441556090133506351133562881198308796949317471115492608788144224315303705110451659915542943154019192074121688178609848493968838293908936041265903507609522501475042526619891486488560840521760770635862149105986608673049478737824014177390090537349672966268911428477183058765098431792180002852631807161737916613563796231814520842257139473877335962642249053301905487639696198461674699850371456969590184264803521110703582692409077",
      "27487419503855344973397364210421432994142321324630633722335884601924601120477524320084129283059391903783771510811060198854237453286992968629519921074414132645862672879454203345567012335684005300903588566780086680073569258436449190150737103556214765268232411210191037750141435474215272779468842445170984757843578202498049465320167153882964902219131362730041961688877798349886547731959073861015811530484446020061315366208470350819355027280134516437125282986609866619982067244591177244618919224084572721946401393098272570853279952347830303844598265051555427534532855661776821163943849717170637199554388812612319208680783",
    ];
    for p in ten_large_primes {
      assert!(miller_rabin(&p.parse::<BigUint>().unwrap()));
    }
  }

  #[test]
  fn test_large_composite_numbers() {
    let ten_large_composites = [
      "8301282214295333176095176564456138946837880004873369690343627150277034882696213640838500670395878724154157732119264422030400347004015422009104098757802697539845534228231276729540848640907906010333883967869722394657887113462499293718633428610703825427260290437651977689575986879479213714356724392851626923838982469529290698729069038808662469131816554362889708290246738930810361901328118681347639838297445505780955709065212848089823684671185820845130380778757312748168110333684635383069767831420780830442680957368183410596288930899397782939938484445815304797867620998100078462133912091546906932875058326340137252447441",
      "8598092462282469522988943947810385373108108260483448467988579451545277191815893381505640490121248426350445086264619325110387310811871194132447747076844291925803709369531988977736013323337050249447006494978643272836614867868833073980844352109503448539370410772807385955081236425238696600831288032067777586960816808960331920548568363399419548658113517492797041896968442225418748183922911956438022011908307562836431373443166449829388719302984075498797691693573363955980010278781177108382112219422902614932298649986032264792152572243592838839543778148532339343945335237490905416836838002498771820735307029185791755241107",
      "9973944782477258294318068305777078510894019448561162769264162643798346569322631236028998827500356282384652380398464246011836005111402387164840657150917586219129514116756561527558930360649043968899390537621195831347960068505836228764087070831961463508908357404769477644832855422527006922763221313292290279979780914836154106998942906097099547423970248965444323587546002244226580310146536838246759215767448191502389022009063382311630623498458690857187545979861583512254036861945793278564066961353456908636532774082411436081460318601653570518767592772226478361010934092132862336205222570609944223447669750614507412958401",
      "29380126837950008730779725285025933479193210048408991753422048125755839094208075302596623916757213371167965860237350552189860889909052004218768213808831224979166192500815055999896421503997477015305720369403290563846109010756183719761864902458612333943175658537651223085948435906028348542400490275726040456124375246855633576457685243499520110525023747823407976041277422234129073364634024770087976382927043763536067990390078706828912360575336290918007201099257719594313685978510390453869035907341767653333656652332772271618414512573558753598001190958228391922921219822970914960757178383312082558525462503979886854550703",
      "469590630587855783474672657272161220533320096262103444518414291788723491223095942892432913259855963937875628141680230431952687711742416178495479631046092155662330292785055050524260753400338088878255751142066800955971860184993632367095508148517436562049184111114494395126566803946209806736105590733129851988417369215661126917243439488587669188638294662677026368497545660012490903342213972183882960555885955355967880276649988107424508500019424423650379420357869927945480761296498130835818999756789449540364089486690298436215340249195142360582773671152061879791370577191512744317234072743938561543386195386953752949095",
      "22198511168201675624277386237652338281751523713950591193459239315919117247450979321354081293428970712798577156436972043731881548517726215457439101046737046995655821838214313077207061554227507460681822301617462623290397863953083659021779490652537268173057270753721951758693401679861301167748458457226058265067070352340965405100030156149533090373696696435033997295114416525954229734260135296235298989084638203701531475415561467606509562438785240583790385560536684984147721526947010503378374235347112086691300088260307057609874583384038020198849707693517582511780239302239577655450234327192978154229967387051346964910867",
      "2166157258661220580465632960877273788934069039502064742250806721995989314425870564310951552052115288777340005652554961272942907902950850800009402129109800787325130655326427948743875019991264315842823504930846043870102581227861928804434487482329335553171901578823477964730939852621676672072020891786435801492527214924897521409507368169631026407387372353156670250697604528375423858862228811282426105936773761245390774891975051252104923905808826387063062801558130241760432852586661544377537680097637091658837233958128186249150586248352548298236455846056515249653868263997043537475645149556164204829766753927571109401571",
      "18485028685596769658137523227035521989935811453969419889089232233898008178791903320417520273064095048251354172333650711502617414838456780325971023364173098313584417283500840108669348191112997963909645337889847795253777958264484342994898685681400959540365516368348605527571322049051163279926783092121557332686746650226898387420317902337423258777545715568526232151727843883306947774432924790169731562533792405580923984859138570971372594612350731904448211464226096210168467994026561576093596038241302603990874613185613722130563822958053349017637535456475338731696073310216766961885695924173795382725624480341974576883639",
      "21962510774741644438691993759176522496538600114834389204435849030379851106040464396034190611054666319529079902152833685262036646493968546439790426560713217442317131426939458851021704913884950284969432297339359698888695203294152441065134747191244217517216084414858625679151776416501753341568780066481442028140630743156519222857413926224260315386902936709602077416234511156016488585373553883276678000937860006897250645920200943874005964140161836376290872179597583174462636988637739891111964660231990795300951192699577065809904146781270972380501894323896710302027831295153645779573641783537040929979401224184429755217125",
      "17159625420948396704961637089183547508506378538009632265811864746164540806622132185210395564415357111833778788533099678451999448897156735312500953129042819673792387551913492316739923141309745291932448972966142535374293739989740299325670431759172545349699564954852128318558720356611721685941775557967874779990128725307075034160004062013884799548371751074498795984413305355134552992015608877412267548037851831181642072526775674154498390675087733278004673985348247801533331742764833385601838168695132703601701395116430005009928129245321484636823684639571312296036583225582400672541251239238408738272929821262089078871917",
    ];
    for p in ten_large_composites {
      assert!(!miller_rabin(&p.parse::<BigUint>().unwrap()));
    }
  }
}
